*{
    
}
.container {
    margin: 20px;
    display: grid;
    height:1000px;
    /*grid-template-columns: 200px 2fr 20%  1fr;*/
    /*this allows to override the one column we have by default
    and add more columns*/

    /*grid-template-columns: 200px 150px 20%  1fr;*/
    /*first column is 200px, second 150px third 20% of the surrounding container*/
    /*Fraction (fr) splits up and take the remaining space */
    /*if we hve 1fr it will create one column with the remaining space*/

    /*grid-template-columns: 200px 150px 20%  2fr;*/
    /*if we hve 2fr it splits the remaining into 2 columns and each column receives half the ramining space*/

    /*grid-template-columns: 200px 2fr 20%  3fr;*/
    /*The remaining space will split up between column TWO and column FOUR*/
    /*COLUMN FOUR will receive 0.5 space more than the column two */

    /*grid-template-columns: 200px 2fr 20%  auto;*/
    /*AUTO -> means it will take only as much WIDTH as it needs */


    /*grid-template-rows: 5rem 2.5rem;*/
    /*first row should have 5rem  -- second row 2.5rem*/

    /*grid-template-rows: 5rem auto;*/
    /*AUTO -> means it will take only as much height as it needs to be to fit the content in */
    /*if CONTAINER had specific height -> auto would fit the entire row (it will occupy the remaining height)*/


    /*grid-template-columns: 25% 25% 25% 25%;*/
    /*suppose that we wanted the 4 columns and each of them occupy the 25% of the container*/

    /*INSTEAD we would use REPEAT*/
    /*grid-template-columns: repeat(4,25% 25% 25% 25%);*/
    /*first argument -> how Often, SECOND the width of the columns*/
    /*WIth the above it will create sixteen columns*/

    grid-template-columns: [hd-start] repeat(4, [col-start] 25% [col-end]) [hd-end];
    grid-template-rows: [hd-start] 5rem [hd-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 200px [row-3-end];
    /*We get automatically generated areas if we follow the name patterns with "-start" or "-end"*/

    /*We use col-start and col-end because it marks what the line is or where does this position
    BUT ALSO we get AUTOMATICALLY GENERATED AREAS if we follow the naming pattern*/

    /*ANOTHER EXAMPLE with the NAMING PATTERN*/

    /*grid-template-columns: [hd-start] repeat(4, [col-start] 25% [col-end]) [hd-end];*/
    /*grid-template-rows: [hd-start] 5rem [hd-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 200px [row-3-end];*/


    /*If we want to have a MINIMUM and a MAXIMUM height we use the MINMAX function  */

    grid-column-gap: 20px;
    /*defines the gap between the columns*/
    grid-row-gap:20px;
    /*defines the gap between the rows*/

    /*SHORTHAND grid-gap:row column*/
    grid-gap:10px 20px;

    grid-template-areas: "header header header header"
                        ". . main main"
                        "footer footer footer footer";
    /*IF THERE IS AN ELEMENT WE WANT TO LEAVE EMPTY WE USE ..*/
    /*grid-template-areas: "header header header header"*/
    /*". .  main main"*/
    /*"footer footer footer footer";*/

    /*IMPORTANT ---> WE need to end up with as many ROWS and COLUMNS we have*/

    /*grid-template-areas we can give our cells a name which can then use on elements to position them
    in these MARKED CELLS*/

    justify-items:center;
    /*default is stretch --------> positioning the elements to the cente ACROSS THE X AXIS IN THEIR ROWS
    AND COLUMNS they belong*/
    align-items:center;
    /*ACROSS THE Y AXIS IN THEIR ROWS
    AND COLUMNS they belong*/
}

.el1 {
    background: rgba(255, 154, 72, 0.5);
    grid-column: col-start 2 / col-end 2;

}

.el2 {
    background: rgba(255, 0, 0, 0.5);
    /*grid-column-start: 1;*/
    /*grid-column-end: -1;*/
    /*WITH -1 MEANS it takes ONE column from the right(end) so it will occupy ALL THE ROW*/

    /*COMBINE grid-column-start:1 -- grid-column-end:-1*/
    /*SHORTHAND*/
    /*grid-column: 1 / -1;*/



    /*grid-row-start:row-2-start;*/
    /*grid-row-end: span 1;*/
    /*OVERLAP PROBLEM --> in row TWO the SECOND element and the THIRD element will OVERLAP*/
    /*WHICH ELEMENT is ON TOP*/
    /*The DOM ORDER IS IMPORTANT (element THREE is on top)*/

    /*COMBINE grid-row-start:2 -- grid-row-end: span 1*/
    /*SHORTHAND*/
    /*grid-row: row-2-start / span 1;*/

    /*SHORTHAND FOR     grid-column: 1 / -1;   -----     grid-row: row-2-start / span 1; */

    /*grid-area: row-2-start / 1 / span 1 / -1;*/
    /*starts with grid-row value START then / grid-column START -- THEN  grid-row-end / grid-column-end */


    z-index:10;
    /*But we can change it with z-index*/
    /*(if we reload the RED color is higher)*/
    /*grid-area;*/
    grid-area:hd;
    /*grid-area:hd;*/


    /*IMPORTANT -----> with grid-area DOM is NOT RESPECTED anymore*/
}

.el3 {
    background: rgba(0, 128, 0, 0.5);
    grid-column-start: 2;
    /*CSS GRID things in lines
     FIRST HORIZONTAL LINE MARKS THE BEGINING OF THE FIRST ROW
     SECOND HORIZONTAL -- END OF THE FIRST ROW
     THIRD ONE -> END OF THE LAST ROW */

    /*grid-column-end: 5;*/
    /*VERTICAL STARTS FROM 1 and ends to 5 so we have
     FOUR COLUMNS and FIVE VERTICAL LINES */

    /*ALTERNATIVE TO --->  grid-column-end: 5;*/
    grid-column-end: span 3 ;
    /*It means it occupies two cells  -> span means KALYPTW */
    /*grid-column-end: span 3  --------> WILL NOT WORK because we have 4 COLUMNS NOT 5;*/



    /*grid-row-start:row-1-start;*/
    /*grid-row-end:row-2-end;*/
    /*Using the grid-row-end: THREE the THIRD element occupies the SECOND row*/
    grid-area:main;
}

.el4 {
    background: rgba(0, 4, 255, 0.5);
    grid-area:footer;
}